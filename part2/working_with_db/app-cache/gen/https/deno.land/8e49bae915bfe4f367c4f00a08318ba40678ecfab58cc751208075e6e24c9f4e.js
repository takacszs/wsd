import { templates } from "./containers.ts";
import { copyProps, XMLEscape } from "./utils.ts";
import EtaErr from "./err.ts";
/* END TYPES */ /**
 * Include a template based on its name (or filepath, if it's already been cached).
 *
 * Called like `include(templateNameOrPath, data)`
 */ function includeHelper(templateNameOrPath, data) {
    const template = this.templates.get(templateNameOrPath);
    if (!template) {
        throw EtaErr('Could not fetch template "' + templateNameOrPath + '"');
    }
    return template(data, this);
}
/** Eta's base (global) configuration */ const config = {
    async: false,
    autoEscape: true,
    autoTrim: [
        false,
        "nl"
    ],
    cache: false,
    e: XMLEscape,
    include: includeHelper,
    parse: {
        exec: "",
        interpolate: "=",
        raw: "~"
    },
    plugins: [],
    rmWhitespace: false,
    tags: [
        "<%",
        "%>"
    ],
    templates: templates,
    useWith: false,
    varName: "it"
};
/**
 * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result
 *
 * @param override Partial configuration object
 * @param baseConfig Partial configuration object to merge before `override`
 *
 * **Example**
 *
 * ```js
 * let customConfig = getConfig({tags: ['!#', '#!']})
 * ```
 */ function getConfig(override, baseConfig) {
    // TODO: run more tests on this
    const res = {}; // Linked
    copyProps(res, config); // Creates deep clone of eta.config, 1 layer deep
    if (baseConfig) {
        copyProps(res, baseConfig);
    }
    if (override) {
        copyProps(res, override);
    }
    return res;
}
/** Update Eta's base config */ function configure(options) {
    return copyProps(config, options);
}
export { config, configure, getConfig };
//# sourceMappingURL=data:application/json;base64,