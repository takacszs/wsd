import { templates } from "./containers.ts";
import { copyProps, XMLEscape } from "./utils.ts";
import EtaErr from "./err.ts";
/* END TYPES */ /**
 * Include a template based on its name (or filepath, if it's already been cached).
 *
 * Called like `include(templateNameOrPath, data)`
 */ function includeHelper(templateNameOrPath, data) {
    const template = this.templates.get(templateNameOrPath);
    if (!template) {
        throw EtaErr('Could not fetch template "' + templateNameOrPath + '"');
    }
    return template(data, this);
}
/** Eta's base (global) configuration */ const config = {
    async: false,
    autoEscape: true,
    autoTrim: [
        false,
        "nl"
    ],
    cache: false,
    e: XMLEscape,
    include: includeHelper,
    parse: {
        exec: "",
        interpolate: "=",
        raw: "~"
    },
    plugins: [],
    rmWhitespace: false,
    tags: [
        "<%",
        "%>"
    ],
    templates: templates,
    useWith: false,
    varName: "it"
};
/**
 * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result
 *
 * @param override Partial configuration object
 * @param baseConfig Partial configuration object to merge before `override`
 *
 * **Example**
 *
 * ```js
 * let customConfig = getConfig({tags: ['!#', '#!']})
 * ```
 */ function getConfig(override, baseConfig) {
    // TODO: run more tests on this
    const res = {}; // Linked
    copyProps(res, config); // Creates deep clone of eta.config, 1 layer deep
    if (baseConfig) {
        copyProps(res, baseConfig);
    }
    if (override) {
        copyProps(res, override);
    }
    return res;
}
/** Update Eta's base config */ function configure(options) {
    return copyProps(config, options);
}
export { config, configure, getConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZXRhQHYxLjEyLjMvY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRlbXBsYXRlcyB9IGZyb20gXCIuL2NvbnRhaW5lcnMudHNcIjtcbmltcG9ydCB7IGNvcHlQcm9wcywgWE1MRXNjYXBlIH0gZnJvbSBcIi4vdXRpbHMudHNcIjtcbmltcG9ydCBFdGFFcnIgZnJvbSBcIi4vZXJyLnRzXCI7XG5cbi8qIFRZUEVTICovXG5cbmltcG9ydCB0eXBlIHsgVGVtcGxhdGVGdW5jdGlvbiB9IGZyb20gXCIuL2NvbXBpbGUudHNcIjtcbmltcG9ydCB0eXBlIHsgQ2FjaGVyIH0gZnJvbSBcIi4vc3RvcmFnZS50c1wiO1xuXG50eXBlIHRyaW1Db25maWcgPSBcIm5sXCIgfCBcInNsdXJwXCIgfCBmYWxzZTtcblxuZXhwb3J0IGludGVyZmFjZSBFdGFDb25maWcge1xuICAvKiogV2hldGhlciBvciBub3QgdG8gYXV0b21hdGljYWxseSBYTUwtZXNjYXBlIGludGVycG9sYXRpb25zLiBEZWZhdWx0IHRydWUgKi9cbiAgYXV0b0VzY2FwZTogYm9vbGVhbjtcblxuICAvKiogQ29uZmlndXJlIGF1dG9tYXRpYyB3aGl0ZXNwYWNlIHRyaW1taW5nLiBEZWZhdWx0IGBbZmFsc2UsICdubCddYCAqL1xuICBhdXRvVHJpbTogdHJpbUNvbmZpZyB8IFt0cmltQ29uZmlnLCB0cmltQ29uZmlnXTtcblxuICAvKiogQ29tcGlsZSB0byBhc3luYyBmdW5jdGlvbiAqL1xuICBhc3luYzogYm9vbGVhbjtcblxuICAvKiogV2hldGhlciBvciBub3QgdG8gY2FjaGUgdGVtcGxhdGVzIGlmIGBuYW1lYCBvciBgZmlsZW5hbWVgIGlzIHBhc3NlZCAqL1xuICBjYWNoZTogYm9vbGVhbjtcblxuICAvKiogWE1MLWVzY2FwaW5nIGZ1bmN0aW9uICovXG4gIGU6IChzdHI6IHN0cmluZykgPT4gc3RyaW5nO1xuXG4gIC8qKiBQYXJzaW5nIG9wdGlvbnMgKi9cbiAgcGFyc2U6IHtcbiAgICAvKiogV2hpY2ggcHJlZml4IHRvIHVzZSBmb3IgZXZhbHVhdGlvbi4gRGVmYXVsdCBgXCJcImAgKi9cbiAgICBleGVjOiBzdHJpbmc7XG5cbiAgICAvKiogV2hpY2ggcHJlZml4IHRvIHVzZSBmb3IgaW50ZXJwb2xhdGlvbi4gRGVmYXVsdCBgXCI9XCJgICovXG4gICAgaW50ZXJwb2xhdGU6IHN0cmluZztcblxuICAgIC8qKiBXaGljaCBwcmVmaXggdG8gdXNlIGZvciByYXcgaW50ZXJwb2xhdGlvbi4gRGVmYXVsdCBgXCJ+XCJgICovXG4gICAgcmF3OiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqIEFycmF5IG9mIHBsdWdpbnMgKi9cbiAgcGx1Z2luczogQXJyYXk8XG4gICAge1xuICAgICAgcHJvY2Vzc0ZuU3RyaW5nPzogRnVuY3Rpb247XG4gICAgICBwcm9jZXNzQVNUPzogRnVuY3Rpb247XG4gICAgICBwcm9jZXNzVGVtcGxhdGU/OiBGdW5jdGlvbjtcbiAgICB9XG4gID47XG5cbiAgLyoqIFJlbW92ZSBhbGwgc2FmZS10by1yZW1vdmUgd2hpdGVzcGFjZSAqL1xuICBybVdoaXRlc3BhY2U6IGJvb2xlYW47XG5cbiAgLyoqIERlbGltaXRlcnM6IGJ5IGRlZmF1bHQgYFsnPCUnLCAnJT4nXWAgKi9cbiAgdGFnczogW3N0cmluZywgc3RyaW5nXTtcblxuICAvKiogSG9sZHMgdGVtcGxhdGUgY2FjaGUgKi9cbiAgdGVtcGxhdGVzOiBDYWNoZXI8VGVtcGxhdGVGdW5jdGlvbj47XG5cbiAgLyoqIE5hbWUgb2YgdGhlIGRhdGEgb2JqZWN0LiBEZWZhdWx0IGBpdGAgKi9cbiAgdmFyTmFtZTogc3RyaW5nO1xuXG4gIC8qKiBBYnNvbHV0ZSBwYXRoIHRvIHRlbXBsYXRlIGZpbGUgKi9cbiAgZmlsZW5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqIEhvbGRzIGNhY2hlIG9mIHJlc29sdmVkIGZpbGVwYXRocy4gU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSAqL1xuICBmaWxlcGF0aENhY2hlPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IGZhbHNlO1xuXG4gIC8qKiBBIGZpbHRlciBmdW5jdGlvbiBhcHBsaWVkIHRvIGV2ZXJ5IGludGVycG9sYXRpb24gb3IgcmF3IGludGVycG9sYXRpb24gKi9cbiAgZmlsdGVyPzogRnVuY3Rpb247XG5cbiAgLyoqIEZ1bmN0aW9uIHRvIGluY2x1ZGUgdGVtcGxhdGVzIGJ5IG5hbWUgKi9cbiAgaW5jbHVkZT86IEZ1bmN0aW9uO1xuXG4gIC8qKiBGdW5jdGlvbiB0byBpbmNsdWRlIHRlbXBsYXRlcyBieSBmaWxlcGF0aCAqL1xuICBpbmNsdWRlRmlsZT86IEZ1bmN0aW9uO1xuXG4gIC8qKiBOYW1lIG9mIHRlbXBsYXRlICovXG4gIG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqIFdoZXJlIHNob3VsZCBhYnNvbHV0ZSBwYXRocyBiZWdpbj8gRGVmYXVsdCAnLycgKi9cbiAgcm9vdD86IHN0cmluZztcblxuICAvKiogTWFrZSBkYXRhIGF2YWlsYWJsZSBvbiB0aGUgZ2xvYmFsIG9iamVjdCBpbnN0ZWFkIG9mIHZhck5hbWUgKi9cbiAgdXNlV2l0aD86IGJvb2xlYW47XG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRvIGNhY2hlIHRlbXBsYXRlcyBpZiBgbmFtZWAgb3IgYGZpbGVuYW1lYCBpcyBwYXNzZWQ6IGR1cGxpY2F0ZSBvZiBgY2FjaGVgICovXG4gIFwidmlldyBjYWNoZVwiPzogYm9vbGVhbjtcblxuICAvKiogRGlyZWN0b3J5IG9yIGRpcmVjdG9yaWVzIHRoYXQgY29udGFpbiB0ZW1wbGF0ZXMgKi9cbiAgdmlld3M/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+O1xuXG4gIFtpbmRleDogc3RyaW5nXTogYW55OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdGFDb25maWdXaXRoRmlsZW5hbWUgZXh0ZW5kcyBFdGFDb25maWcge1xuICBmaWxlbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBQYXJ0aWFsQ29uZmlnID0gUGFydGlhbDxFdGFDb25maWc+O1xuXG4vKiBFTkQgVFlQRVMgKi9cblxuLyoqXG4gKiBJbmNsdWRlIGEgdGVtcGxhdGUgYmFzZWQgb24gaXRzIG5hbWUgKG9yIGZpbGVwYXRoLCBpZiBpdCdzIGFscmVhZHkgYmVlbiBjYWNoZWQpLlxuICpcbiAqIENhbGxlZCBsaWtlIGBpbmNsdWRlKHRlbXBsYXRlTmFtZU9yUGF0aCwgZGF0YSlgXG4gKi9cblxuZnVuY3Rpb24gaW5jbHVkZUhlbHBlcihcbiAgdGhpczogRXRhQ29uZmlnLFxuICB0ZW1wbGF0ZU5hbWVPclBhdGg6IHN0cmluZyxcbiAgZGF0YTogb2JqZWN0LFxuKTogc3RyaW5nIHtcbiAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlcy5nZXQodGVtcGxhdGVOYW1lT3JQYXRoKTtcbiAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgIHRocm93IEV0YUVycignQ291bGQgbm90IGZldGNoIHRlbXBsYXRlIFwiJyArIHRlbXBsYXRlTmFtZU9yUGF0aCArICdcIicpO1xuICB9XG4gIHJldHVybiB0ZW1wbGF0ZShkYXRhLCB0aGlzKTtcbn1cblxuLyoqIEV0YSdzIGJhc2UgKGdsb2JhbCkgY29uZmlndXJhdGlvbiAqL1xuY29uc3QgY29uZmlnOiBFdGFDb25maWcgPSB7XG4gIGFzeW5jOiBmYWxzZSxcbiAgYXV0b0VzY2FwZTogdHJ1ZSxcbiAgYXV0b1RyaW06IFtmYWxzZSwgXCJubFwiXSxcbiAgY2FjaGU6IGZhbHNlLFxuICBlOiBYTUxFc2NhcGUsXG4gIGluY2x1ZGU6IGluY2x1ZGVIZWxwZXIsXG4gIHBhcnNlOiB7XG4gICAgZXhlYzogXCJcIixcbiAgICBpbnRlcnBvbGF0ZTogXCI9XCIsXG4gICAgcmF3OiBcIn5cIixcbiAgfSxcbiAgcGx1Z2luczogW10sXG4gIHJtV2hpdGVzcGFjZTogZmFsc2UsXG4gIHRhZ3M6IFtcIjwlXCIsIFwiJT5cIl0sXG4gIHRlbXBsYXRlczogdGVtcGxhdGVzLFxuICB1c2VXaXRoOiBmYWxzZSxcbiAgdmFyTmFtZTogXCJpdFwiLFxufTtcblxuLyoqXG4gKiBUYWtlcyBvbmUgb3IgdHdvIHBhcnRpYWwgKG5vdCBuZWNlc3NhcmlseSBjb21wbGV0ZSkgY29uZmlndXJhdGlvbiBvYmplY3RzLCBtZXJnZXMgdGhlbSAxIGxheWVyIGRlZXAgaW50byBldGEuY29uZmlnLCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0XG4gKlxuICogQHBhcmFtIG92ZXJyaWRlIFBhcnRpYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqIEBwYXJhbSBiYXNlQ29uZmlnIFBhcnRpYWwgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gbWVyZ2UgYmVmb3JlIGBvdmVycmlkZWBcbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYGpzXG4gKiBsZXQgY3VzdG9tQ29uZmlnID0gZ2V0Q29uZmlnKHt0YWdzOiBbJyEjJywgJyMhJ119KVxuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q29uZmlnKG92ZXJyaWRlOiBQYXJ0aWFsQ29uZmlnLCBiYXNlQ29uZmlnPzogRXRhQ29uZmlnKTogRXRhQ29uZmlnIHtcbiAgLy8gVE9ETzogcnVuIG1vcmUgdGVzdHMgb24gdGhpc1xuXG4gIGNvbnN0IHJlczogUGFydGlhbENvbmZpZyA9IHt9OyAvLyBMaW5rZWRcbiAgY29weVByb3BzKHJlcywgY29uZmlnKTsgLy8gQ3JlYXRlcyBkZWVwIGNsb25lIG9mIGV0YS5jb25maWcsIDEgbGF5ZXIgZGVlcFxuXG4gIGlmIChiYXNlQ29uZmlnKSB7XG4gICAgY29weVByb3BzKHJlcywgYmFzZUNvbmZpZyk7XG4gIH1cblxuICBpZiAob3ZlcnJpZGUpIHtcbiAgICBjb3B5UHJvcHMocmVzLCBvdmVycmlkZSk7XG4gIH1cblxuICByZXR1cm4gcmVzIGFzIEV0YUNvbmZpZztcbn1cblxuLyoqIFVwZGF0ZSBFdGEncyBiYXNlIGNvbmZpZyAqL1xuXG5mdW5jdGlvbiBjb25maWd1cmUob3B0aW9uczogUGFydGlhbENvbmZpZyk6IFBhcnRpYWw8RXRhQ29uZmlnPiB7XG4gIHJldHVybiBjb3B5UHJvcHMoY29uZmlnLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgY29uZmlnLCBjb25maWd1cmUsIGdldENvbmZpZyB9O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsU0FBUyxRQUFRLGlCQUFpQixDQUFDO0FBQzVDLFNBQVMsU0FBUyxFQUFFLFNBQVMsUUFBUSxZQUFZLENBQUM7QUFDbEQsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBaUc5QixhQUFhLEdBRWI7Ozs7Q0FJQyxHQUVELFNBQVMsYUFBYSxDQUVwQixrQkFBMEIsRUFDMUIsSUFBWSxFQUNKO0lBQ1IsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQUFBQztJQUN4RCxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsTUFBTSxNQUFNLENBQUMsNEJBQTRCLEdBQUcsa0JBQWtCLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUNELE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQsc0NBQXNDLEdBQ3RDLE1BQU0sTUFBTSxHQUFjO0lBQ3hCLEtBQUssRUFBRSxLQUFLO0lBQ1osVUFBVSxFQUFFLElBQUk7SUFDaEIsUUFBUSxFQUFFO1FBQUMsS0FBSztRQUFFLElBQUk7S0FBQztJQUN2QixLQUFLLEVBQUUsS0FBSztJQUNaLENBQUMsRUFBRSxTQUFTO0lBQ1osT0FBTyxFQUFFLGFBQWE7SUFDdEIsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLEVBQUU7UUFDUixXQUFXLEVBQUUsR0FBRztRQUNoQixHQUFHLEVBQUUsR0FBRztLQUNUO0lBQ0QsT0FBTyxFQUFFLEVBQUU7SUFDWCxZQUFZLEVBQUUsS0FBSztJQUNuQixJQUFJLEVBQUU7UUFBQyxJQUFJO1FBQUUsSUFBSTtLQUFDO0lBQ2xCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLE9BQU8sRUFBRSxLQUFLO0lBQ2QsT0FBTyxFQUFFLElBQUk7Q0FDZCxBQUFDO0FBRUY7Ozs7Ozs7Ozs7O0NBV0MsR0FFRCxTQUFTLFNBQVMsQ0FBQyxRQUF1QixFQUFFLFVBQXNCLEVBQWE7SUFDN0UsK0JBQStCO0lBRS9CLE1BQU0sR0FBRyxHQUFrQixFQUFFLEFBQUMsRUFBQyxTQUFTO0lBQ3hDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxpREFBaUQ7SUFFekUsSUFBSSxVQUFVLEVBQUU7UUFDZCxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFFBQVEsRUFBRTtRQUNaLFNBQVMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFjO0FBQzFCLENBQUM7QUFFRCw2QkFBNkIsR0FFN0IsU0FBUyxTQUFTLENBQUMsT0FBc0IsRUFBc0I7SUFDN0QsT0FBTyxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxHQUFHIn0=